import React, { useEffect, useState } from 'react';
import { getAllOderDetails } from '../service/OderdetailService';
import styles from '../Css/OrderDetailList.module.css';
import { FaArrowLeft, FaArrowRight } from "react-icons/fa";

const OrderDetailList = () => {
    const [oderDetails, setOderDetails] = useState([]);
    const [filteredOderDetails, setFilteredOderDetails] = useState([]); // D·ªØ li·ªáu ƒë√£ l·ªçc

    const [loading, setLoading] = useState(true);
    const [currentPage, setCurrentPage] = useState(1);
    const recordsPerPage = 2;
    const [filterDate, setFilterDate] = useState(""); // Ng√†y l·ªçc
    const [isSearching, setIsSearching] = useState(false);

    const fetchOrderDetails = async () => {
        try {
            const data = await getAllOderDetails();
            console.log("D·ªØ li·ªáu t·ª´ API:", data);

            // S·∫Øp x·∫øp d·ªØ li·ªáu ngay sau khi l·∫•y t·ª´ API
            const sortedData = data.sort((a, b) =>
                new Date(b.shippingDay.replace(" ", "T")) - new Date(a.shippingDay.replace(" ", "T"))
            );

            console.log("D·ªØ li·ªáu sau khi s·∫Øp x·∫øp:", sortedData);
            setOderDetails(sortedData);
            setFilteredOderDetails(sortedData); // ƒê·∫∑t d·ªØ li·ªáu g·ªëc v√†o filteredOderDetails
        } catch (error) {
            console.error("Error fetching order details:", error);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchOrderDetails();
    }, []);
    // üëâ L·ªçc theo ng√†y
    const totalPages = Math.ceil(filteredOderDetails.length / recordsPerPage);
    const indexOfLastRecord = currentPage * recordsPerPage;
    const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;
    const currentRecords = filteredOderDetails.slice(indexOfFirstRecord, indexOfLastRecord);

    const paginate = (pageNumber) => setCurrentPage(pageNumber);
    const prevPage = () => setCurrentPage((prev) => Math.max(prev - 1, 1));
    const nextPage = () => setCurrentPage((prev) => Math.min(prev + 1, totalPages));

    const handleDateChange = (event) => {
        const inputDate = event.target.value;

        setFilterDate(inputDate);
        if (inputDate === "") {
            // N·∫øu √¥ l·ªçc tr·ªëng, hi·ªÉn th·ªã l·∫°i d·ªØ li·ªáu g·ªëc
            setFilteredOderDetails(oderDetails);
        } else {
            // L·ªçc theo ng√†y
            const filteredData = oderDetails.filter((order) => {
                const orderDate = order.shippingDay.replace(" ", "T").split("T")[0]; // L·∫•y ng√†y t·ª´ shippingDay
                return orderDate === inputDate;
            });
            setFilteredOderDetails(filteredData);
        }
    };

    const renderPageNumbers = () => {
        const maxPageNumbersToShow = 5; // S·ªë n√∫t trang t·ªëi ƒëa hi·ªÉn th·ªã
        let startPage = Math.max(currentPage - Math.floor(maxPageNumbersToShow / 2), 1);
        let endPage = Math.min(startPage + maxPageNumbersToShow - 1, totalPages);

        // ƒêi·ªÅu ch·ªânh ƒë·ªÉ kh√¥ng v∆∞·ª£t qu√° t·ªïng s·ªë trang
        if (endPage > totalPages) {
            endPage = totalPages;
            startPage = Math.max(endPage - maxPageNumbersToShow + 1, 1);
        }

        const pageNumbers = [];
        for (let i = startPage; i <= endPage; i++) {
            pageNumbers.push(
                <button
                    key={i}
                    onClick={() => paginate(i)}
                    className={`${styles.pageButton} ${i === currentPage ? styles.active : ''}`}
                >
                    {i}
                </button>
            );
        }

        // Ch√®n d·∫•u `...` n·∫øu c·∫ßn
        if (startPage > 1) {
            pageNumbers.unshift(
                <button key="prevEllipsis" className={styles.pageButton} disabled>
                    ...
                </button>
            );
        }

        if (endPage < totalPages) {
            pageNumbers.push(
                <button key="nextEllipsis" className={styles.pageButton} disabled>
                    ...
                </button>
            );
        }

        return pageNumbers;
    };
    console.log(currentRecords.map(order => order.shippingDay));

    return (
        <div className={styles.orderDetailContainer}>
            <h1 className={styles.orderDetailTitle}>L·ªãch s·ª≠ h√≥a ƒë∆°n</h1>
            <div className={styles.dateInputWrapper}>
                <input
                    type="date"
                    value={filterDate}
                    onChange={handleDateChange}
                    className={styles.dateFilterInput}
                    placeholder="L·ªçc theo ng√†y"
                />
            </div>
            {[...currentRecords]
                .sort((a, b) => {
                    return new Date(b.shippingDay.replace(" ", "T")) - new Date(a.shippingDay.replace(" ", "T"));
                })                // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo ng√†y
                .map((order) => (
                    <div key={order.oderDetailId} className={styles.orderDetailCard}>
                        <div className={styles.orderDetailHeader}>
                            {order.callOderRequest?.table?.tableName}
                        </div>
                        <div className={styles.orderDetailContent}>
                            {/* M√£ h√≥a ƒë∆°n */}
                            <div>
                                <span className={styles.orderDetailLabel}>M√£ h√≥a ƒë∆°n: </span>
                                {order.callOderRequest?.id || "Kh√¥ng x√°c ƒë·ªãnh"}
                            </div>
                            <div>
                                <span className={styles.orderDetailLabel}>Product Name: </span>
                                {order.product?.productName || "Kh√¥ng c√≥ th√¥ng tin s·∫£n ph·∫©m"}
                            </div>
                            <div>
                                <span className={styles.orderDetailLabel}>Product price: </span>
                                {order.product?.productPrice
                                    ? `${order.product.productPrice.toLocaleString("vi-VN")} VND`
                                    : "Kh√¥ng r√µ gi√°"}
                            </div>

                            <div>
                                <span className={styles.orderDetailLabel}>Quantity: </span>
                                {order.quantity}
                            </div>
                            <div>
                                <span className={styles.orderDetailLabel}>Size: </span>
                                {order.size?.sizeName || "Kh√¥ng r√µ size"}
                            </div>
                            <div>
                                <span className={styles.orderDetailLabel}>Toppings: </span>
                                {(order.toppings || []).length > 0
                                    ? order.toppings.map((topping) => topping.name).join(', ')
                                    : 'No toppings'}

                            </div>
                            <div>
                                <span className={styles.orderDetailLabel}>Discount: </span>
                                {order.discount ? `${order.discount.value}%` : 'No discount'}
                            </div>
                            <div>
                                <span className={styles.orderDetailLabel}>Note Product: </span>
                                {order.noteProduct || 'No notes'}
                            </div>
                            <div>
                                <span className={styles.orderDetailLabel}>Shipping Day: </span>
                                {order.shippingDay}
                            </div>
                            {/* Hi·ªÉn th·ªã ph∆∞∆°ng th·ª©c thanh to√°n */}
                            <div>
                                <span className={styles.orderDetailLabel}>Payment Method: </span>
                                {order.callOderRequest?.paymentStatus === 'cash'
                                    ? 'Thanh to√°n ti·ªÅn m·∫∑t'
                                    : order.callOderRequest?.paymentStatus === 'transfer'
                                        ? 'Thanh to√°n chuy·ªÉn kho·∫£n'
                                        : 'No payment method'}
                            </div>

                        </div>
                        <div className={styles.orderDetailFooter}>
                            <div>
                                <span className={styles.orderDetailLabel}><strong>Gi√° g·ªëc:</strong> </span>
                                <strong>
                                    {(
                                        (order.product?.productPrice || 0) * order.quantity +
                                        (order.size?.price || 0) * order.quantity +
                                        (order.toppings?.reduce((sum, topping) => sum + topping.price, 0) * order.quantity || 0)
                                    ).toLocaleString("vi-VN")} VND
                                </strong>
                            </div>

                            <div>
                                <span className={styles.orderDetailLabel}><strong>Total Price:</strong> </span>
                                <strong>{order.totalMoneyOder.toLocaleString("vi-VN")} VND</strong>
                            </div>


                        </div>
                    </div>
                ))}

            <div className={styles.pagination}>
                <button
                    onClick={prevPage}
                    className={`${styles.pageButton} ${styles.pageButtonPrev}`}
                    disabled={currentPage === 1}
                >
                    <FaArrowLeft className={styles.pageButtonIcon}/>
                </button>
                {renderPageNumbers()}
                <button
                    onClick={nextPage}
                    className={`${styles.pageButton} ${styles.pageButtonNext}`}
                    disabled={currentPage === totalPages}
                >
                    <FaArrowRight className={styles.pageButtonIcon}/>
                </button>
            </div>
        </div>
    );
};

export default OrderDetailList;
