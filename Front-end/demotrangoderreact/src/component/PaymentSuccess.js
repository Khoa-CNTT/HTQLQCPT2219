import React, { useEffect, useState } from "react";
import { useSearchParams } from "react-router-dom";
import axios from "axios";
import { toast } from "react-toastify";
import { useRef } from "react";
import styles from "../Css/PaymentStatusPage.module.css";
import response from "sockjs-client/lib/event/trans-message";
import Modal1 from "react-modal";
import {FaStar} from "react-icons/fa";
import styles1 from '../Css/TableDetails.module.css';

const PaymentSuccess = () => {
    const [searchParams] = useSearchParams();
    const [paymentStatus, setPaymentStatus] = useState("");
    const isOrderPlacedRef = useRef(false); // S·ª≠ d·ª•ng useRef ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i
    const [isFeedbackModalOpen, setIsFeedbackModalOpen] = useState(false); // State m·ªü modal ƒë√°nh gi√°
    const [callOrderId, setCallOrderId] = useState(null); // L∆∞u ID ƒë∆°n h√†ng ƒë·ªÉ g·ª≠i ƒë√°nh gi√°
    const [rating, setRating] = useState(0); // ƒê√°nh gi√° m·∫∑c ƒë·ªãnh
    const [content, setContent] = useState(""); // B√¨nh lu·∫≠n c·ªßa kh√°ch h√†ng
    useEffect(() => {
        const responseCode = searchParams.get("vnp_ResponseCode");
        const amount = searchParams.get("vnp_Amount") / 100; // Chuy·ªÉn v·ªÅ ƒë∆°n v·ªã VNƒê
        const orderInfo = searchParams.get("vnp_OrderInfo");
        const bankCode = searchParams.get("vnp_BankCode");

        // Ki·ªÉm tra tr·∫°ng th√°i v√† ch·ªâ g·ªçi API n·∫øu ch∆∞a x·ª≠ l√Ω
        if (responseCode === "00" && !isOrderPlacedRef.current) {
            isOrderPlacedRef.current = true; // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
            const orderData = JSON.parse(localStorage.getItem("orderData"));

            const placeOrder = async () => {
                try {
                    const response = await axios.post(
                        "http://localhost:8081/api/orders/place",
                        orderData,
                        { headers: { "Content-Type": "application/json" } } // ƒê·∫£m b·∫£o g·ª≠i JSON
                    );
                    console.log("Full API Response:", response); // Ki·ªÉm tra to√†n b·ªô response

                    if (response.data && response.data.id) {
                        setCallOrderId(response.data.id);
                        setIsFeedbackModalOpen(true); // M·ªü modal ƒë√°nh gi√°
                    } else {
                        console.warn("API kh√¥ng tr·∫£ v·ªÅ ID ƒë∆°n h√†ng, modal s·∫Ω kh√¥ng m·ªü.");
                    }

                    const paidTables = JSON.parse(localStorage.getItem("paidTables")) || [];
                    if (!paidTables.includes(orderData.table.tableId)) {
                        paidTables.push(orderData.table.tableId);
                        localStorage.setItem("paidTables", JSON.stringify(paidTables));
                    }

                    toast.success("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!");
                    setPaymentStatus({
                        status: "success",
                        message: `Thanh to√°n th√†nh c√¥ng!`,
                        amount,
                        orderInfo,
                        bankCode,
                    });
                } catch (error) {
                    console.error("L·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng:", error);
                    toast.error("C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n ƒë∆°n h√†ng.");
                    setPaymentStatus({
                        status: "failed",
                        message: `Thanh to√°n th·∫•t b·∫°i. C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ƒë∆°n h√†ng.`,
                    });
                }
            };

            placeOrder();
        } else if (!isOrderPlacedRef.current && responseCode !== "00") {
            setPaymentStatus({
                status: "failed",
                message: `Thanh to√°n th·∫•t b·∫°i. M√£ l·ªói: ${responseCode}`,
            });
        }
    }, []); // L∆∞u √Ω: Kh√¥ng th√™m `searchParams` v√†o dependencies ƒë·ªÉ tr√°nh ch·∫°y l·∫°i
    useEffect(() => {
        console.log("isFeedbackModalOpen changed:", isFeedbackModalOpen);
    }, [isFeedbackModalOpen]);
    const [reviewerName, setReviewerName] = useState("");

    const handleSubmitFeedback = async () => {
        if (!callOrderId) {
            toast.error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");
            return;
        }

        const feedbackData = {
            reviewerName: reviewerName.trim(),
            rating: rating,
            content: content.trim(),
        };



        console.log("üü¢ D·ªØ li·ªáu g·ª≠i l√™n server:", feedbackData);

        if (!feedbackData.content) {
            toast.error("Vui l√≤ng nh·∫≠p n·ªôi dung ƒë√°nh gi√°!");
            return;
        }

        try {
            const token = localStorage.getItem("token");
            const response = await axios.post(
                `http://localhost:8081/api/feedback/${callOrderId}`,
                feedbackData,
                { headers: { Authorization: `Bearer ${token}` } }
            );

            console.log("üü¢ Ph·∫£n h·ªìi t·ª´ server:", response.data);

            toast.success("C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!");
            setIsFeedbackModalOpen(false);
        } catch (error) {
            console.error("üî¥ L·ªói khi g·ª≠i ƒë√°nh gi√°:", error);
            toast.error("C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°.");
        }
    };

    return (
        <div className={styles.containerPayment}>
            {paymentStatus.status === "success" ? (
                <div className={`${styles.resultContainer} ${styles.successContainer}`}>
                    <h1 className={`${styles.resultTitle} ${styles.successTitle}`}>Thanh to√°n th√†nh c√¥ng</h1>
                    <div className={styles.resultDetail}>
                        <p>
                            <span className={styles.resultLabel}>S·ªë ti·ªÅn:</span> {paymentStatus.amount} VNƒê
                        </p>
                        <p>
                            <span className={styles.resultLabel}>N·ªôi dung ƒë∆°n h√†ng:</span> {paymentStatus.orderInfo}
                        </p>
                        <p>
                            <span className={styles.resultLabel}>Ng√¢n h√†ng:</span> {paymentStatus.bankCode}
                        </p>
                    </div>
                    <button
                        className={`${styles.resultButton} ${styles.successButton}`}
                        onClick={() => (window.location.href = "/home")}
                    >
                        Quay l·∫°i trang ch·ªß
                    </button>
                </div>
            ) : (
                <div className={`${styles.resultContainer} ${styles.errorContainer}`}>
                    <h1 className={`${styles.resultTitle} ${styles.errorTitle}`}>Thanh to√°n th·∫•t b·∫°i</h1>
                    <p className={styles.resultDetail}>{paymentStatus.message}</p>
                    <button
                        className={`${styles.resultButton} ${styles.errorButton}`}
                        onClick={() => (window.location.href = "/")}
                    >
                        Th·ª≠ l·∫°i
                    </button>
                </div>
            )}
            {/* Modal ƒë√°nh gi√° */}
            <Modal1
                isOpen={isFeedbackModalOpen}
                onRequestClose={() => setIsFeedbackModalOpen(false)}
                contentLabel="Feedback Modal"
                ariaHideApp={false}
                className={styles["modal-contentx"]}
                overlayClassName={styles["react-modal-overlayx"]}
            >
                <h2>ƒê√°nh gi√° d·ªãch v·ª•</h2>
                <p>H√£y ƒë·ªÉ l·∫°i ƒë√°nh gi√° c·ªßa b·∫°n!</p>

                <div className={styles["ratingx"]}>
                    <span>Ch·∫•t l∆∞·ª£ng: </span>
                    {[1, 2, 3, 4, 5].map((star) => (
                        <FaStar
                            key={star}
                            className={star <= rating ? styles["active-starx"] : ""}
                            onClick={() => setRating(star)}
                        />
                    ))}
                </div>

                <textarea
                    value={content}
                    onChange={(e) => setContent(e.target.value)}
                    placeholder="Nh·∫≠p ƒë√°nh gi√° c·ªßa b·∫°n..."
                    className={styles["feedback-textareax"]}
                />
                <input
                    type="text"
                    value={reviewerName}
                    onChange={(e) => setReviewerName(e.target.value)}
                    placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n"
                    className={styles["feedback-inputx"]}
                />

                <div className={styles["buttonGrouphx"]}>
                    <button onClick={handleSubmitFeedback} className={styles["submitButtonhx"]}>
                        G·ª≠i ƒë√°nh gi√°
                    </button>
                    <button onClick={() => setIsFeedbackModalOpen(false)} className={styles["cancelButtonhx"]}>
                        H·ªßy
                    </button>
                </div>
            </Modal1>

        </div>
    );
};


export default PaymentSuccess;
