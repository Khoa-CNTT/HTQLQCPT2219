import React, { useEffect, useState } from 'react';
import {Link, useNavigate} from 'react-router-dom';
import { getAllTables } from '../service/TableService';
import { Modal } from 'antd';
import styles from '../Css/TableAdmin.module.css'; // Import CSS Module
import {getAllOderDetails} from "../service/OderdetailService";
import OrderDetailList from "./OrderDetailList";
import { faChair, faHistory, faSignOutAlt, faUser } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {GetUser} from "../service/UserService";
import { logout } from '../service/UserService';
import {ToastContainer} from "react-toastify"; // ƒê∆∞·ªùng d·∫´n t·ªõi file authService.js
import 'react-toastify/dist/ReactToastify.css';

const TableListAdmin = () => {
    const [tables, setTables] = useState([]);
    const [loading, setLoading] = useState(true);
    const [paidTables, setPaidTables] = useState([]);
    const [isPaidModalVisible, setIsPaidModalVisible] = useState(false); // Modal cho b√†n thanh to√°n
    const [paidModalContent, setPaidModalContent] = useState(''); // N·ªôi dung modal cho thanh to√°n
    const [isServiceModalVisible, setIsServiceModalVisible] = useState(false); // Modal cho g·ªçi ph·ª•c v·ª•
    const [serviceModalContent, setServiceModalContent] = useState(''); // N·ªôi dung modal cho g·ªçi ph·ª•c v·ª•
    const [serviceRequests, setServiceRequests] = useState([]);
// H√†ng ƒë·ª£i th√¥ng b√°o v√† tr·∫°ng th√°i x·ª≠ l√Ω
    const [notificationQueue, setNotificationQueue] = useState([]);
    const [isProcessingQueue, setIsProcessingQueue] = useState(false);
    const [userName, setUserName] = useState(''); // State ƒë·ªÉ l∆∞u userName
    const [imageUrl, setImageUrl] = useState(''); // State ƒë·ªÉ l∆∞u imageUrl
    const [isOrderHistoryVisible, setIsOrderHistoryVisible] = useState(false); // Tr·∫°ng th√°i hi·ªÉn th·ªã l·ªãch s·ª≠ ƒë∆°n h√†ng
    const [orderDetails, setOrderDetails] = useState([]);
    const [showTableList, setShowTableList] = useState(true); // State ƒë·ªÉ ƒëi·ªÅu khi·ªÉn hi·ªÉn th·ªã danh s√°ch b√†n hay l·ªãch s·ª≠ h√≥a ƒë∆°n
    const navigate = useNavigate();  // Hook d√πng ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng v·ªÅ trang kh√°c

    useEffect(() => {
        const fetchUserInfo = async () => {
            try {
                const user = await GetUser(); // G·ªçi API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
                if (user) {
                    setUserName(user.username); // C·∫≠p nh·∫≠t t√™n ng∆∞·ªùi d√πng
                    setImageUrl(user.imgUrl); // C·∫≠p nh·∫≠t URL ·∫£nh ƒë·∫°i di·ªán
                }
            } catch (error) {
                console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
            } finally {
                setLoading(false); // D·ª´ng tr·∫°ng th√°i loading
            }
        };

        fetchUserInfo();
    }, []);

    // H√†m fetch d·ªØ li·ªáu b√†n
    const fetchTables = async () => {
        try {
            const data = await getAllTables();
            setTables(data);
        } catch (error) {
            console.error("Error fetching table data:", error);
        } finally {
            setLoading(false);
        }
    };
    // H√†m g·ªçi API l·∫•y order details
    const fetchOrderDetails = async () => {
        try {
            const data = await getAllOderDetails(); // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu
            setOrderDetails(data); // L∆∞u d·ªØ li·ªáu v√†o state
        } catch (error) {
            console.error("Error fetching order details:", error);
        }
    };
    const toggleTableList = () => {
        setIsOrderHistoryVisible(false); // ·∫®n l·ªãch s·ª≠ h√≥a ƒë∆°n
    };

    const toggleOrderHistory = () => {
        setIsOrderHistoryVisible(true); // Hi·ªÉn th·ªã l·ªãch s·ª≠ h√≥a ƒë∆°n
    };
    useEffect(() => {
        // Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ c√°c h√†m ƒë·ªÉ l·∫•y danh s√°ch b√†n v√† ng∆∞·ªùi d√πng
        fetchOrderDetails(); // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu order
    }, []);

    // C·∫≠p nh·∫≠t paidTables t·ª´ localStorage
    const updatePaidTablesFromLocalStorage = () => {
        const paidTableIds = JSON.parse(localStorage.getItem('paidTables')) || [];
        const newPaidTables = paidTableIds.filter((tableId) => !paidTables.includes(tableId)); // L·ªçc c√°c b√†n m·ªõi thanh to√°n

        if (newPaidTables.length > 0) {
            // L·∫•y t√™n c√°c b√†n m·ªõi thanh to√°n
            const newNotifications = newPaidTables.map((tableId) => {
                const table = tables.find((t) => t.tableId === tableId);
                const tableName = table ? table.tableName : `B√†n ${tableId}`;
                return ` ${tableName} v·ª´a ƒë·∫∑t h√†ng!`;
            });

            // Th√™m th√¥ng b√°o v√†o h√†ng ƒë·ª£i
            notificationQueue.push(...newNotifications);

            // N·∫øu kh√¥ng c√≥ th√¥ng b√°o n√†o ƒëang hi·ªÉn th·ªã, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng ƒë·ª£i
            if (!isProcessingQueue) {
                processNotificationQueue();
            }

            // C·∫≠p nh·∫≠t danh s√°ch b√†n ƒë√£ thanh to√°n
            setPaidTables(paidTableIds);
        }
    };
    // H√†m x·ª≠ l√Ω th√¥ng b√°o l·∫ßn l∆∞·ª£t trong h√†ng ƒë·ª£i
    const processNotificationQueue = () => {
        if (notificationQueue.length > 0) {
            setIsProcessingQueue(true);
            const currentNotification = notificationQueue.shift(); // L·∫•y th√¥ng b√°o ƒë·∫ßu ti√™n
            setPaidModalContent(currentNotification);
            setIsPaidModalVisible(true);
        } else {
            setIsProcessingQueue(false);
        }
    };
    const PRIORITY_MAP = {
        "g·ªçi ph·ª•c v·ª•": 1,
        "ƒë·ªïi m√≥n": 2,
        "t√≠nh ti·ªÅn": 3
    };


    const [currentNotification, setCurrentNotification] = useState(null);

    const checkServiceRequests = () => {
        const requests = JSON.parse(localStorage.getItem('serviceRequests')) || [];

        if (requests.length > 0) {
            const newQueue = requests.map(({ id, type }) => {
                const lowerType = type.toLowerCase(); // ‚úÖ ƒë·∫£m b·∫£o kh·ªõp key
                const table = tables.find((t) => t.tableId === id);
                const tableName = table ? table.tableName : `B√†n ${id}`;
                return {
                    id,
                    type,
                    message: `${tableName} v·ª´a y√™u c·∫ßu "${type}"`,
                    priority: PRIORITY_MAP[lowerType] || 99
                };
            });

            console.log("üÜï Y√™u c·∫ßu m·ªõi: ", newQueue);

            // ‚úÖ G·ªôp v·ªõi h√†ng ƒë·ª£i c≈© v√† sort lu√¥n theo ƒë·ªô ∆∞u ti√™n
            setNotificationQueue(prev => {
                const merged = [...prev, ...newQueue];
                const sorted = merged.sort((a, b) => a.priority - b.priority); // üëà sort lu√¥n ·ªü ƒë√¢y
                console.log("üìã H√†ng ƒë·ª£i sau khi g·ªôp v√† sort: ", sorted);
                return sorted;
            });

            localStorage.setItem('serviceRequests', JSON.stringify([]));
        }
    };
    useEffect(() => {
        fetchTables();
        const interval = setInterval(checkServiceRequests, 1000);
        window.addEventListener('storage', updatePaidTablesFromLocalStorage);

        return () => {
            clearInterval(interval);
            window.removeEventListener('storage', updatePaidTablesFromLocalStorage);
        };
    }, []);

    useEffect(() => {
        if (notificationQueue.length === 0) return;

        const sortedQueue = [...notificationQueue].sort((a, b) => a.priority - b.priority);
        const nextNotification = sortedQueue[0];

        // Tr∆∞·ªùng h·ª£p ch∆∞a c√≥ notification n√†o ƒëang hi·ªÉn th·ªã
        if (!currentNotification) {
            setCurrentNotification(nextNotification);
            setNotificationQueue((prev) =>
                prev.filter(item => !(item.id === nextNotification.id && item.type === nextNotification.type))
            );
            setIsServiceModalVisible(true);
            console.log("üîî Hi·ªÉn th·ªã notification (m·ªõi): ", nextNotification);
        }

        // ‚úÖ Tr∆∞·ªùng h·ª£p ƒëang hi·ªÉn th·ªã 1 th√¥ng b√°o, nh∆∞ng c√≥ c√°i m·ªõi ∆∞u ti√™n h∆°n
        else if (nextNotification.priority < currentNotification.priority) {
            // Cho ph√©p thay th·∫ø ngay l·∫≠p t·ª©c
            setCurrentNotification(nextNotification);
            setNotificationQueue((prev) =>
                [...prev, currentNotification] // ƒë·∫©y c√°i c≈© l·∫°i v√†o h√†ng ƒë·ª£i
                    .filter(item => !(item.id === nextNotification.id && item.type === nextNotification.type))
            );
            setIsServiceModalVisible(true);
            console.log("üîÅ Thay th·∫ø notification ƒëang hi·ªÉn th·ªã b·∫±ng c√°i ∆∞u ti√™n h∆°n: ", nextNotification);
        }

    }, [notificationQueue, currentNotification]);











    useEffect(() => {
        // L·∫•y userName t·ª´ token

        fetchTables();
        const interval = setInterval(checkServiceRequests, 1000); // Ki·ªÉm tra y√™u c·∫ßu m·ªói gi√¢y

        // C·∫≠p nh·∫≠t paidTables t·ª´ localStorage
        updatePaidTablesFromLocalStorage();

        // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa localStorage (ch·ªâ √°p d·ª•ng v·ªõi window)
        window.addEventListener('storage', updatePaidTablesFromLocalStorage);

        // D·ªçn d·∫πp khi component unmount
        return () => {
            clearInterval(interval);
            window.removeEventListener('storage', updatePaidTablesFromLocalStorage);
        };
    }, []); // Ch·ªâ ch·∫°y l·∫ßn ƒë·∫ßu khi component mount
// ƒê√≥ng modal v√† hi·ªÉn th·ªã th√¥ng b√°o ti·∫øp theo
    const closePaidModal = () => {
        setIsPaidModalVisible(false);
        processNotificationQueue();
    };
    // Ki·ªÉm tra loading
    if (loading) return <p>Loading...</p>;

    return (
        <div style={{position: 'relative', height: '100vh', width: '100vw'}}>
            {/* ·∫¢nh n·ªÅn */}
            <div className={styles.backgroundOverlay}></div>

            {/* Header */}

            <header className={styles.header}>
                <div className={styles.userInfo}>
                    {imageUrl && (
                        <Link to="/edit-user">
                            <img src={imageUrl} alt="User Avatar" className={styles.userAvatar}/>
                        </Link>
                    )}
                    <h2 className={styles.userName}>Xin ch√†o, {userName}!</h2>
                </div>
                <nav className={styles.navbar}>
                    <button onClick={toggleTableList} className={styles.navItem}>
                        <FontAwesomeIcon icon={faChair} className={styles.icon}/> Danh s√°ch b√†n
                    </button>
                    <button onClick={toggleOrderHistory} className={styles.navItem}>
                        <FontAwesomeIcon icon={faHistory} className={styles.icon}/> L·ªãch s·ª≠ h√≥a ƒë∆°n
                    </button>
                    {/* N√∫t ƒêƒÉng xu·∫•t */}
                    <button onClick={logout} className={styles.navItem}>
                        <FontAwesomeIcon icon={faSignOutAlt} className={styles.icon}/> ƒêƒÉng xu·∫•t
                    </button>
                </nav>
            </header>


            {/* N·ªôi dung */}
            {/* N·ªôi dung */}
            <div style={{marginTop: '100px'}}>
                {isOrderHistoryVisible ? (
                    // N·∫øu hi·ªÉn th·ªã L·ªãch s·ª≠ h√≥a ƒë∆°n
                    <div>
                        <OrderDetailList orderDetails={orderDetails}/> {/* Hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng */}
                    </div>
                ) : (
                    // N·∫øu hi·ªÉn th·ªã Danh s√°ch b√†n
                    <div className={styles.tableGrid}>
                        {tables.map((table) => (
                            <Link
                                key={table.tableId}
                                to={`/order/${table.tableId}`}
                                className={styles.tableLink}
                            >
                                <div
                                    className={`${styles.tableCard} ${
                                        paidTables.includes(table.tableId) ? styles.paid : ''
                                    }`}
                                >
                                    {table.tableName}
                                </div>
                            </Link>
                        ))}
                    </div>
                )}
            </div>


            {/* Modal thanh to√°n */}
            <Modal
                title={<div className={styles.modalTitle}>Th√¥ng B√°o</div>}
                visible={isPaidModalVisible}
                onOk={closePaidModal}
                footer={[
                    <button
                        key="ok"
                        className={styles.modalButton}
                        onClick={closePaidModal}
                    >
                        OK
                    </button>,
                ]}
            >
                <div className={styles.modalContainer}>
                    <p className={styles.modalContent}>{paidModalContent}</p>
                </div>
            </Modal>

            {/* Modal g·ªçi ph·ª•c v·ª• */}
            <Modal
                title="Th√¥ng B√°o G·ªçi Ph·ª•c V·ª•"
                visible={isServiceModalVisible}
                onOk={() => {
                    setIsServiceModalVisible(false);
                    setCurrentNotification(null);
                }}
                footer={[
                    <button
                        key="ok"
                        className={styles.modalButton}
                        onClick={() => {
                            setIsServiceModalVisible(false);
                            setCurrentNotification(null);
                        }}
                    >
                        OK
                    </button>
                ]}
            >
                <div className={styles.modalContainer}>
                    <p className={styles.modalContent}>{currentNotification?.message}</p>
                </div>
            </Modal>


            <ToastContainer position="top-right" autoClose={3000} />
        </div>
    );
};

export default TableListAdmin;
